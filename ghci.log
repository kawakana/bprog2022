GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/kana/bprog2022/.ghci
2022-05-19 15:41:27.6007665
>>> 12 + 12
24
2022-05-19 15:54:29.0325321
>>> 3 + 3 * 3
12
2022-05-19 15:55:13.9892169
>>> 10 - 5
5
2022-05-19 15:55:44.1251124
>>> sqrt 2
1.4142135623730951
2022-05-19 15:59:45.3777276
>>> double 3

<interactive>:5:1: error: Variable not in scope: double :: t0 -> t
2022-05-19 16:02:36.3574381
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/kana/bprog2022/.ghci
2022-05-26 15:02:11.1368592
>>> maxBound :: Int
9223372036854775807
2022-05-26 15:03:46.1833799
>>> 2 ^ 63 - 1
9223372036854775807
2022-05-26 15:05:04.3585976
>>> minBound :: Int
-9223372036854775808
2022-05-26 15:05:37.4911008
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
Ok, no modules loaded.
2022-05-26 15:49:04.6585086
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-05-26 15:49:04.6976001
>>> double 3
6
2022-05-26 15:56:27.2545128
>>> double (1 + 3)
8
2022-05-26 15:57:07.5985262
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/kana/bprog2022/.ghci
2022-06-09 14:55:11.3281123
>>> 2 + 3 * 4
14
2022-06-09 14:57:45.6838385
>>> (2 + 3) * 4
20
2022-06-09 15:00:14.2751592
>>> :i sqrt
type Floating :: * -> Constraint
class Fractional a => Floating a where
  ...
  sqrt :: a -> a
  ...
  	-- Defined in ‘GHC.Float’
2022-06-09 15:00:51.2433925
>>> sqrt (3 ^ 2 + 4 ^ 2)
5.0
2022-06-09 15:05:16.4252154
>>> sqrt (25 :: Int)

<interactive>:5:1: error:
    • No instance for (Floating Int) arising from a use of ‘sqrt’
    • In the expression: sqrt (25 :: Int)
      In an equation for ‘it’: it = sqrt (25 :: Int)
2022-06-09 15:08:18.130697
>>> sqrt (25 :: Double)
5.0
2022-06-09 15:09:25.5733071
>>> sqrt 25
5.0
2022-06-09 15:10:14.323501
>>> hoge 25 :: Int

<interactive>:8:1: error: Variable not in scope: hoge :: t0 -> Int
2022-06-09 15:14:02.4651384
>>> head [1, 2, ]3

<interactive>:9:13: error: parse error on input ‘]’
2022-06-09 15:46:39.3616329
>>> head [1, 2, 3]
1
2022-06-09 15:47:19.7710834
>>> head [3, 1, 4, 1, 5]
3
2022-06-09 15:47:50.8178274
>>> head []
*** Exception: Prelude.head: empty list
2022-06-09 15:49:39.6134905
>>> hoge = [3, 1, 4, 1, 5] :: [Int]
2022-06-09 15:50:39.5965105
>>> hoge
[3,1,4,1,5]
2022-06-09 15:50:56.2632412
>>> head hoge
3
2022-06-09 15:51:26.1829825
>>> tail hoge
[1,4,1,5]
2022-06-09 15:51:47.6824765
>>> tail []
*** Exception: Prelude.tail: empty list
2022-06-09 15:52:34.6334579
>>> hoge !! 0
3
2022-06-09 15:55:08.0974355
>>> hoge 2 !!

<interactive>:19:10: error:
    parse error (possibly incorrect indentation or mismatched brackets)
2022-06-09 15:55:17.8053259
>>> hoge 2 !! hoge

<interactive>:20:1: error:
    • Couldn't match expected type: t0 -> [a]
                  with actual type: [Int]
    • The function ‘hoge’ is applied to one value argument,
        but its type ‘[Int]’ has none
      In the first argument of ‘(!!)’, namely ‘hoge 2’
      In the expression: hoge 2 !! hoge
    • Relevant bindings include it :: a (bound at <interactive>:20:1)

<interactive>:20:11: error:
    • Couldn't match expected type ‘Int’ with actual type ‘[Int]’
    • In the second argument of ‘(!!)’, namely ‘hoge’
      In the expression: hoge 2 !! hoge
      In an equation for ‘it’: it = hoge 2 !! hoge
2022-06-09 15:55:50.301254
>>> hoge !! 2
4
2022-06-09 15:56:23.9187403
>>> take 3 hoge
[3,1,4]
2022-06-09 15:56:56.1187203
>>> hoge
[3,1,4,1,5]
2022-06-09 15:57:02.05112
>>> drop 3 hoge
[1,5]
2022-06-09 15:57:24.6415805
>>> hoge 5 hoge

<interactive>:25:1: error:
    • Couldn't match expected type: t0 -> [Int] -> t
                  with actual type: [Int]
    • The function ‘hoge’ is applied to two value arguments,
        but its type ‘[Int]’ has none
      In the expression: hoge 5 hoge
      In an equation for ‘it’: it = hoge 5 hoge
    • Relevant bindings include it :: t (bound at <interactive>:25:1)
2022-06-09 15:58:25.8748779
>>> hoge !! 5
*** Exception: Prelude.!!: index too large
2022-06-09 15:59:02.5434579
>>> take 10 hoge
[3,1,4,1,5]
2022-06-09 15:59:24.2852163
>>> drop 10 hoge
[]
2022-06-09 16:00:31.1747048
>>> length hoge
5
2022-06-09 16:01:10.7366881
>>> length []
0
2022-06-09 16:01:25.3763471
>>> sum hoge
14
2022-06-09 16:02:04.1351227
>>> product hoge
60
2022-06-09 16:03:05.397948
>>> hoge ++ hoge
[3,1,4,1,5,3,1,4,1,5]
2022-06-09 16:04:56.068315
>>> reverse hoge
[5,1,4,1,3]
2022-06-09 16:05:43.9034984
>>> : load src/First.hs

<interactive>:1:1: error: Not in scope: ‘load’
2022-06-09 16:07:54.9346354
>>> :e src/First.hs
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
Ok, no modules loaded.
2022-06-09 16:08:57.9147043
>>> :load src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-09 16:08:57.9545302
>>> double 3 + 3
9
2022-06-09 16:10:21.5115572
>>> double (3 + 3)
12
2022-06-09 16:11:31.1261993
>>> :e
   1  module First where
   2  
   3  double :: Int -> Int
   4  double x = x + x
   5  quadruple :: Int -> Int
   6  quadruple x = double (double x)
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-09 16:14:38.8388016
>>> quadruple 2
8
2022-06-09 16:15:00.2624828
>>> :quit
Leaving GHCi.
